// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class GraphQlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::TransactionsGraphQLClient.State.GraphQlClientStoreAccessor> AddGraphQlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::TransactionsGraphQLClient.State.GraphQlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.AddPaymentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.AddTransactionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GetPaymentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GetTransactionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.SubNewPaymentSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.SubNewTransactionSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GraphQlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.IGraphQlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::TransactionsGraphQLClient.State.GraphQlClientStoreAccessor>("GraphQlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("GraphQlClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("timestamptz"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddPaymentResult>, global::TransactionsGraphQLClient.State.AddPaymentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddPaymentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.IAddPaymentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddPaymentResult>, global::TransactionsGraphQLClient.State.AddPaymentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.IAddPaymentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddPaymentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddPaymentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.AddPaymentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.IAddPaymentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.AddPaymentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddTransactionResult>, global::TransactionsGraphQLClient.State.AddTransactionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddTransactionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.IAddTransactionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddTransactionResult>, global::TransactionsGraphQLClient.State.AddTransactionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.IAddTransactionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddTransactionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddTransactionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.AddTransactionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.IAddTransactionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.AddTransactionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetPaymentsResult>, global::TransactionsGraphQLClient.State.GetPaymentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetPaymentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.IGetPaymentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetPaymentsResult>, global::TransactionsGraphQLClient.State.GetPaymentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.IGetPaymentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetPaymentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetPaymentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.GetPaymentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.IGetPaymentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GetPaymentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetTransactionsResult>, global::TransactionsGraphQLClient.State.GetTransactionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetTransactionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.IGetTransactionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetTransactionsResult>, global::TransactionsGraphQLClient.State.GetTransactionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.IGetTransactionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetTransactionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetTransactionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.GetTransactionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.IGetTransactionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GetTransactionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewPaymentResult>, global::TransactionsGraphQLClient.State.SubNewPaymentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewPaymentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.ISubNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewPaymentResult>, global::TransactionsGraphQLClient.State.SubNewPaymentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.ISubNewPaymentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewPaymentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewPaymentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.SubNewPaymentSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.ISubNewPaymentSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.SubNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewTransactionResult>, global::TransactionsGraphQLClient.State.SubNewTransactionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewTransactionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.ISubNewTransactionSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewTransactionResult>, global::TransactionsGraphQLClient.State.SubNewTransactionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TransactionsGraphQLClient.ISubNewTransactionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewTransactionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewTransactionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.SubNewTransactionSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.ISubNewTransactionSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.SubNewTransactionSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::TransactionsGraphQLClient.State.GraphQlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.GraphQlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TransactionsGraphQLClient.IGraphQlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TransactionsGraphQLClient.GraphQlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace TransactionsGraphQLClient
{
    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentResult : global::System.IEquatable<AddPaymentResult>, IAddPaymentResult
    {
        public AddPaymentResult(global::TransactionsGraphQLClient.IAddPayment_Insert_Payments_one? insert_Payments_One)
        {
            Insert_Payments_one = insert_Payments_One;
        }

        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::TransactionsGraphQLClient.IAddPayment_Insert_Payments_one? Insert_Payments_one { get; }

        public virtual global::System.Boolean Equals(AddPaymentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Insert_Payments_one is null && other.Insert_Payments_one is null) || Insert_Payments_one != null && Insert_Payments_one.Equals(other.Insert_Payments_one)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPaymentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Insert_Payments_one != null)
                {
                    hash ^= 397 * Insert_Payments_one.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPayment_Insert_Payments_one_Payments : global::System.IEquatable<AddPayment_Insert_Payments_one_Payments>, IAddPayment_Insert_Payments_one_Payments
    {
        public AddPayment_Insert_Payments_one_Payments(global::System.Int32 id, global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate)
        {
            Id = id;
            FromIban = fromIban;
            ToIban = toIban;
            Amount = amount;
            CreateDate = createDate;
        }

        public global::System.Int32 Id { get; }

        public global::System.String FromIban { get; }

        public global::System.String ToIban { get; }

        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }

        public virtual global::System.Boolean Equals(AddPayment_Insert_Payments_one_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && FromIban.Equals(other.FromIban) && ToIban.Equals(other.ToIban) && Amount == other.Amount && CreateDate.Equals(other.CreateDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPayment_Insert_Payments_one_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * CreateDate.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddPaymentResult
    {
        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::TransactionsGraphQLClient.IAddPayment_Insert_Payments_one? Insert_Payments_one { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddPayment_Insert_Payments_one
    {
        public global::System.Int32 Id { get; }

        public global::System.String FromIban { get; }

        public global::System.String ToIban { get; }

        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddPayment_Insert_Payments_one_Payments : IAddPayment_Insert_Payments_one
    {
    }

    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionResult : global::System.IEquatable<AddTransactionResult>, IAddTransactionResult
    {
        public AddTransactionResult(global::TransactionsGraphQLClient.IAddTransaction_Insert_Transactions_one? insert_Transactions_One)
        {
            Insert_Transactions_one = insert_Transactions_One;
        }

        /// <summary>
        /// insert a single row into the table: "Transactions"
        /// </summary>
        public global::TransactionsGraphQLClient.IAddTransaction_Insert_Transactions_one? Insert_Transactions_one { get; }

        public virtual global::System.Boolean Equals(AddTransactionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Insert_Transactions_one is null && other.Insert_Transactions_one is null) || Insert_Transactions_one != null && Insert_Transactions_one.Equals(other.Insert_Transactions_one)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTransactionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Insert_Transactions_one != null)
                {
                    hash ^= 397 * Insert_Transactions_one.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransaction_Insert_Transactions_one_Transactions : global::System.IEquatable<AddTransaction_Insert_Transactions_one_Transactions>, IAddTransaction_Insert_Transactions_one_Transactions
    {
        public AddTransaction_Insert_Transactions_one_Transactions(global::System.Int32 id, global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId)
        {
            Id = id;
            FromIban = fromIban;
            ToIban = toIban;
            Amount = amount;
            ExecutionDate = executionDate;
            PaymentId = paymentId;
        }

        public global::System.Int32 Id { get; }

        public global::System.String FromIban { get; }

        public global::System.String ToIban { get; }

        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.Int32 PaymentId { get; }

        public virtual global::System.Boolean Equals(AddTransaction_Insert_Transactions_one_Transactions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && FromIban.Equals(other.FromIban) && ToIban.Equals(other.ToIban) && Amount == other.Amount && ExecutionDate.Equals(other.ExecutionDate) && PaymentId == other.PaymentId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTransaction_Insert_Transactions_one_Transactions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * ExecutionDate.GetHashCode();
                hash ^= 397 * PaymentId.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddTransactionResult
    {
        /// <summary>
        /// insert a single row into the table: "Transactions"
        /// </summary>
        public global::TransactionsGraphQLClient.IAddTransaction_Insert_Transactions_one? Insert_Transactions_one { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddTransaction_Insert_Transactions_one
    {
        public global::System.Int32 Id { get; }

        public global::System.String FromIban { get; }

        public global::System.String ToIban { get; }

        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.Int32 PaymentId { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddTransaction_Insert_Transactions_one_Transactions : IAddTransaction_Insert_Transactions_one
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsResult : global::System.IEquatable<GetPaymentsResult>, IGetPaymentsResult
    {
        public GetPaymentsResult(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetPayments_Payments> payments)
        {
            Payments = payments;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetPayments_Payments> Payments { get; }

        public virtual global::System.Boolean Equals(GetPaymentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Payments, other.Payments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaymentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Payments_elm in Payments)
                {
                    hash ^= 397 * Payments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPayments_Payments_Payments : global::System.IEquatable<GetPayments_Payments_Payments>, IGetPayments_Payments_Payments
    {
        public GetPayments_Payments_Payments(global::System.Double amount, global::System.String createDate, global::System.String fromIban, global::System.Int32 id, global::System.String toIban)
        {
            Amount = amount;
            CreateDate = createDate;
            FromIban = fromIban;
            Id = id;
            ToIban = toIban;
        }

        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public virtual global::System.Boolean Equals(GetPayments_Payments_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && CreateDate.Equals(other.CreateDate) && FromIban.Equals(other.FromIban) && Id == other.Id && ToIban.Equals(other.ToIban);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPayments_Payments_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * CreateDate.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetPaymentsResult
    {
        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetPayments_Payments> Payments { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetPayments_Payments
    {
        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetPayments_Payments_Payments : IGetPayments_Payments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsResult : global::System.IEquatable<GetTransactionsResult>, IGetTransactionsResult
    {
        public GetTransactionsResult(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetTransactions_Transactions> transactions)
        {
            Transactions = transactions;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetTransactions_Transactions> Transactions { get; }

        public virtual global::System.Boolean Equals(GetTransactionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Transactions, other.Transactions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTransactionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Transactions_elm in Transactions)
                {
                    hash ^= 397 * Transactions_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactions_Transactions_Transactions : global::System.IEquatable<GetTransactions_Transactions_Transactions>, IGetTransactions_Transactions_Transactions
    {
        public GetTransactions_Transactions_Transactions(global::System.Double amount, global::System.String executionDate, global::System.String fromIban, global::System.Int32 id, global::System.String toIban, global::System.Int32 paymentId)
        {
            Amount = amount;
            ExecutionDate = executionDate;
            FromIban = fromIban;
            Id = id;
            ToIban = toIban;
            PaymentId = paymentId;
        }

        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public global::System.Int32 PaymentId { get; }

        public virtual global::System.Boolean Equals(GetTransactions_Transactions_Transactions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ExecutionDate.Equals(other.ExecutionDate) && FromIban.Equals(other.FromIban) && Id == other.Id && ToIban.Equals(other.ToIban) && PaymentId == other.PaymentId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTransactions_Transactions_Transactions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * ExecutionDate.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                hash ^= 397 * PaymentId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetTransactionsResult
    {
        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetTransactions_Transactions> Transactions { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetTransactions_Transactions
    {
        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public global::System.Int32 PaymentId { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetTransactions_Transactions_Transactions : IGetTransactions_Transactions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentResult : global::System.IEquatable<SubNewPaymentResult>, ISubNewPaymentResult
    {
        public SubNewPaymentResult(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewPayment_Payments> payments)
        {
            Payments = payments;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewPayment_Payments> Payments { get; }

        public virtual global::System.Boolean Equals(SubNewPaymentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Payments, other.Payments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubNewPaymentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Payments_elm in Payments)
                {
                    hash ^= 397 * Payments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPayment_Payments_Payments : global::System.IEquatable<SubNewPayment_Payments_Payments>, ISubNewPayment_Payments_Payments
    {
        public SubNewPayment_Payments_Payments(global::System.Double amount, global::System.String createDate, global::System.String fromIban, global::System.Int32 id, global::System.String toIban)
        {
            Amount = amount;
            CreateDate = createDate;
            FromIban = fromIban;
            Id = id;
            ToIban = toIban;
        }

        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public virtual global::System.Boolean Equals(SubNewPayment_Payments_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && CreateDate.Equals(other.CreateDate) && FromIban.Equals(other.FromIban) && Id == other.Id && ToIban.Equals(other.ToIban);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubNewPayment_Payments_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * CreateDate.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewPaymentResult
    {
        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewPayment_Payments> Payments { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewPayment_Payments
    {
        public global::System.Double Amount { get; }

        public global::System.String CreateDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewPayment_Payments_Payments : ISubNewPayment_Payments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionResult : global::System.IEquatable<SubNewTransactionResult>, ISubNewTransactionResult
    {
        public SubNewTransactionResult(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewTransaction_Transactions> transactions)
        {
            Transactions = transactions;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewTransaction_Transactions> Transactions { get; }

        public virtual global::System.Boolean Equals(SubNewTransactionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Transactions, other.Transactions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubNewTransactionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Transactions_elm in Transactions)
                {
                    hash ^= 397 * Transactions_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransaction_Transactions_Transactions : global::System.IEquatable<SubNewTransaction_Transactions_Transactions>, ISubNewTransaction_Transactions_Transactions
    {
        public SubNewTransaction_Transactions_Transactions(global::System.Double amount, global::System.String executionDate, global::System.String fromIban, global::System.Int32 id, global::System.String toIban, global::System.Int32 paymentId)
        {
            Amount = amount;
            ExecutionDate = executionDate;
            FromIban = fromIban;
            Id = id;
            ToIban = toIban;
            PaymentId = paymentId;
        }

        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public global::System.Int32 PaymentId { get; }

        public virtual global::System.Boolean Equals(SubNewTransaction_Transactions_Transactions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ExecutionDate.Equals(other.ExecutionDate) && FromIban.Equals(other.FromIban) && Id == other.Id && ToIban.Equals(other.ToIban) && PaymentId == other.PaymentId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubNewTransaction_Transactions_Transactions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * ExecutionDate.GetHashCode();
                hash ^= 397 * FromIban.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ToIban.GetHashCode();
                hash ^= 397 * PaymentId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewTransactionResult
    {
        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewTransaction_Transactions> Transactions { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewTransaction_Transactions
    {
        public global::System.Double Amount { get; }

        public global::System.String ExecutionDate { get; }

        public global::System.String FromIban { get; }

        public global::System.Int32 Id { get; }

        public global::System.String ToIban { get; }

        public global::System.Int32 PaymentId { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewTransaction_Transactions_Transactions : ISubNewTransaction_Transactions
    {
    }

    /// <summary>
    /// Represents the operation service of the AddPayment GraphQL operation
    /// <code>
    /// mutation AddPayment($fromIban: String!, $toIban: String!, $amount: Float!, $createDate: timestamptz!) {
    ///   insert_Payments_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, CreateDate: $createDate }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     CreateDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPaymentMutationDocument()
        {
        }

        public static AddPaymentMutationDocument Instance { get; } = new AddPaymentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x24, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x2c, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x2c, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x49, 0x64, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "369c9efc1ff0fe9a725378fc124574b6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPayment GraphQL operation
    /// <code>
    /// mutation AddPayment($fromIban: String!, $toIban: String!, $amount: Float!, $createDate: timestamptz!) {
    ///   insert_Payments_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, CreateDate: $createDate }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     CreateDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentMutation : global::TransactionsGraphQLClient.IAddPaymentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPaymentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _timestamptzFormatter;
        public AddPaymentMutation(global::StrawberryShake.IOperationExecutor<IAddPaymentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _timestamptzFormatter = serializerResolver.GetInputValueFormatter("timestamptz");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPaymentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPaymentResult>> ExecuteAsync(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fromIban, toIban, amount, createDate);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPaymentResult>> Watch(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fromIban, toIban, amount, createDate);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fromIban", FormatFromIban(fromIban));
            variables.Add("toIban", FormatToIban(toIban));
            variables.Add("amount", FormatAmount(amount));
            variables.Add("createDate", FormatCreateDate(createDate));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPaymentMutationDocument.Instance.Hash.Value, name: "AddPayment", document: AddPaymentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFromIban(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatToIban(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAmount(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        private global::System.Object? FormatCreateDate(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _timestamptzFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPayment GraphQL operation
    /// <code>
    /// mutation AddPayment($fromIban: String!, $toIban: String!, $amount: Float!, $createDate: timestamptz!) {
    ///   insert_Payments_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, CreateDate: $createDate }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     CreateDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddPaymentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPaymentResult>> ExecuteAsync(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPaymentResult>> Watch(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String createDate, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddTransaction GraphQL operation
    /// <code>
    /// mutation AddTransaction($fromIban: String!, $toIban: String!, $amount: Float!, $executionDate: timestamptz!, $paymentId: Int!) {
    ///   insert_Transactions_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, ExecutionDate: $executionDate, PaymentId: $paymentId }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     ExecutionDate
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionMutationDocument : global::StrawberryShake.IDocument
    {
        private AddTransactionMutationDocument()
        {
        }

        public static AddTransactionMutationDocument Instance { get; } = new AddTransactionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x24, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x2c, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x2c, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x49, 0x64, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3068ba057ede2e610823a3cb6f8f3c24");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddTransaction GraphQL operation
    /// <code>
    /// mutation AddTransaction($fromIban: String!, $toIban: String!, $amount: Float!, $executionDate: timestamptz!, $paymentId: Int!) {
    ///   insert_Transactions_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, ExecutionDate: $executionDate, PaymentId: $paymentId }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     ExecutionDate
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionMutation : global::TransactionsGraphQLClient.IAddTransactionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddTransactionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _timestamptzFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public AddTransactionMutation(global::StrawberryShake.IOperationExecutor<IAddTransactionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _timestamptzFormatter = serializerResolver.GetInputValueFormatter("timestamptz");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddTransactionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddTransactionResult>> ExecuteAsync(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fromIban, toIban, amount, executionDate, paymentId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddTransactionResult>> Watch(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fromIban, toIban, amount, executionDate, paymentId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fromIban", FormatFromIban(fromIban));
            variables.Add("toIban", FormatToIban(toIban));
            variables.Add("amount", FormatAmount(amount));
            variables.Add("executionDate", FormatExecutionDate(executionDate));
            variables.Add("paymentId", FormatPaymentId(paymentId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddTransactionMutationDocument.Instance.Hash.Value, name: "AddTransaction", document: AddTransactionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFromIban(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatToIban(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAmount(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        private global::System.Object? FormatExecutionDate(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _timestamptzFormatter.Format(value);
        }

        private global::System.Object? FormatPaymentId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddTransaction GraphQL operation
    /// <code>
    /// mutation AddTransaction($fromIban: String!, $toIban: String!, $amount: Float!, $executionDate: timestamptz!, $paymentId: Int!) {
    ///   insert_Transactions_one(object: { FromIban: $fromIban, ToIban: $toIban, Amount: $amount, ExecutionDate: $executionDate, PaymentId: $paymentId }) {
    ///     __typename
    ///     Id
    ///     FromIban
    ///     ToIban
    ///     Amount
    ///     ExecutionDate
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddTransactionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddTransactionResult>> ExecuteAsync(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddTransactionResult>> Watch(global::System.String fromIban, global::System.String toIban, global::System.Double amount, global::System.String executionDate, global::System.Int32 paymentId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPayments GraphQL operation
    /// <code>
    /// query GetPayments {
    ///   Payments {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPaymentsQueryDocument()
        {
        }

        public static GetPaymentsQueryDocument Instance { get; } = new GetPaymentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2406d5815668a71288da08453bca5d01");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPayments GraphQL operation
    /// <code>
    /// query GetPayments {
    ///   Payments {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsQuery : global::TransactionsGraphQLClient.IGetPaymentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPaymentsResult> _operationExecutor;
        public GetPaymentsQuery(global::StrawberryShake.IOperationExecutor<IGetPaymentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPaymentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaymentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaymentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPaymentsQueryDocument.Instance.Hash.Value, name: "GetPayments", document: GetPaymentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPayments GraphQL operation
    /// <code>
    /// query GetPayments {
    ///   Payments {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetPaymentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaymentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaymentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTransactions GraphQL operation
    /// <code>
    /// query GetTransactions {
    ///   Transactions {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTransactionsQueryDocument()
        {
        }

        public static GetTransactionsQueryDocument Instance { get; } = new GetTransactionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9a3a82f794e16359452f3c2106632751");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTransactions GraphQL operation
    /// <code>
    /// query GetTransactions {
    ///   Transactions {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsQuery : global::TransactionsGraphQLClient.IGetTransactionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTransactionsResult> _operationExecutor;
        public GetTransactionsQuery(global::StrawberryShake.IOperationExecutor<IGetTransactionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTransactionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTransactionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTransactionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTransactionsQueryDocument.Instance.Hash.Value, name: "GetTransactions", document: GetTransactionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTransactions GraphQL operation
    /// <code>
    /// query GetTransactions {
    ///   Transactions {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetTransactionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTransactionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTransactionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubNewPayment GraphQL operation
    /// <code>
    /// subscription SubNewPayment {
    ///   Payments(limit: 1, order_by: { CreateDate: desc }) {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private SubNewPaymentSubscriptionDocument()
        {
        }

        public static SubNewPaymentSubscriptionDocument Instance { get; } = new SubNewPaymentSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a5c3ce137441ba7d93a13e3a6d751aa9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubNewPayment GraphQL operation
    /// <code>
    /// subscription SubNewPayment {
    ///   Payments(limit: 1, order_by: { CreateDate: desc }) {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentSubscription : global::TransactionsGraphQLClient.ISubNewPaymentSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubNewPaymentResult> _operationExecutor;
        public SubNewPaymentSubscription(global::StrawberryShake.IOperationExecutor<ISubNewPaymentResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubNewPaymentResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubNewPaymentSubscriptionDocument.Instance.Hash.Value, name: "SubNewPayment", document: SubNewPaymentSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the SubNewPayment GraphQL operation
    /// <code>
    /// subscription SubNewPayment {
    ///   Payments(limit: 1, order_by: { CreateDate: desc }) {
    ///     __typename
    ///     Amount
    ///     CreateDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewPaymentSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubNewTransaction GraphQL operation
    /// <code>
    /// subscription SubNewTransaction {
    ///   Transactions(limit: 1, order_by: { ExecutionDate: desc }) {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private SubNewTransactionSubscriptionDocument()
        {
        }

        public static SubNewTransactionSubscriptionDocument Instance { get; } = new SubNewTransactionSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x54, 0x6f, 0x49, 0x62, 0x61, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "968c1d3e55f4f90fc8eaba5e07e87b47");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubNewTransaction GraphQL operation
    /// <code>
    /// subscription SubNewTransaction {
    ///   Transactions(limit: 1, order_by: { ExecutionDate: desc }) {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionSubscription : global::TransactionsGraphQLClient.ISubNewTransactionSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubNewTransactionResult> _operationExecutor;
        public SubNewTransactionSubscription(global::StrawberryShake.IOperationExecutor<ISubNewTransactionResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubNewTransactionResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubNewTransactionResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubNewTransactionSubscriptionDocument.Instance.Hash.Value, name: "SubNewTransaction", document: SubNewTransactionSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the SubNewTransaction GraphQL operation
    /// <code>
    /// subscription SubNewTransaction {
    ///   Transactions(limit: 1, order_by: { ExecutionDate: desc }) {
    ///     __typename
    ///     Amount
    ///     ExecutionDate
    ///     FromIban
    ///     Id
    ///     ToIban
    ///     PaymentId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISubNewTransactionSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubNewTransactionResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GraphQlClient : global::TransactionsGraphQLClient.IGraphQlClient
    {
        private readonly global::TransactionsGraphQLClient.IAddPaymentMutation _addPayment;
        private readonly global::TransactionsGraphQLClient.IAddTransactionMutation _addTransaction;
        private readonly global::TransactionsGraphQLClient.IGetPaymentsQuery _getPayments;
        private readonly global::TransactionsGraphQLClient.IGetTransactionsQuery _getTransactions;
        private readonly global::TransactionsGraphQLClient.ISubNewPaymentSubscription _subNewPayment;
        private readonly global::TransactionsGraphQLClient.ISubNewTransactionSubscription _subNewTransaction;
        public GraphQlClient(global::TransactionsGraphQLClient.IAddPaymentMutation addPayment, global::TransactionsGraphQLClient.IAddTransactionMutation addTransaction, global::TransactionsGraphQLClient.IGetPaymentsQuery getPayments, global::TransactionsGraphQLClient.IGetTransactionsQuery getTransactions, global::TransactionsGraphQLClient.ISubNewPaymentSubscription subNewPayment, global::TransactionsGraphQLClient.ISubNewTransactionSubscription subNewTransaction)
        {
            _addPayment = addPayment ?? throw new global::System.ArgumentNullException(nameof(addPayment));
            _addTransaction = addTransaction ?? throw new global::System.ArgumentNullException(nameof(addTransaction));
            _getPayments = getPayments ?? throw new global::System.ArgumentNullException(nameof(getPayments));
            _getTransactions = getTransactions ?? throw new global::System.ArgumentNullException(nameof(getTransactions));
            _subNewPayment = subNewPayment ?? throw new global::System.ArgumentNullException(nameof(subNewPayment));
            _subNewTransaction = subNewTransaction ?? throw new global::System.ArgumentNullException(nameof(subNewTransaction));
        }

        public static global::System.String ClientName => "GraphQlClient";
        public global::TransactionsGraphQLClient.IAddPaymentMutation AddPayment => _addPayment;
        public global::TransactionsGraphQLClient.IAddTransactionMutation AddTransaction => _addTransaction;
        public global::TransactionsGraphQLClient.IGetPaymentsQuery GetPayments => _getPayments;
        public global::TransactionsGraphQLClient.IGetTransactionsQuery GetTransactions => _getTransactions;
        public global::TransactionsGraphQLClient.ISubNewPaymentSubscription SubNewPayment => _subNewPayment;
        public global::TransactionsGraphQLClient.ISubNewTransactionSubscription SubNewTransaction => _subNewTransaction;
    }

    /// <summary>
    /// Represents the GraphQlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGraphQlClient
    {
        global::TransactionsGraphQLClient.IAddPaymentMutation AddPayment { get; }

        global::TransactionsGraphQLClient.IAddTransactionMutation AddTransaction { get; }

        global::TransactionsGraphQLClient.IGetPaymentsQuery GetPayments { get; }

        global::TransactionsGraphQLClient.IGetTransactionsQuery GetTransactions { get; }

        global::TransactionsGraphQLClient.ISubNewPaymentSubscription SubNewPayment { get; }

        global::TransactionsGraphQLClient.ISubNewTransactionSubscription SubNewTransaction { get; }
    }
}

namespace TransactionsGraphQLClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.AddPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPaymentResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.IAddPaymentResult);
        public AddPaymentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPaymentResultInfo info)
            {
                return new AddPaymentResult(MapIAddPayment_Insert_Payments_one(info.Insert_Payments_one, snapshot));
            }

            throw new global::System.ArgumentException("AddPaymentResultInfo expected.");
        }

        private global::TransactionsGraphQLClient.IAddPayment_Insert_Payments_one? MapIAddPayment_Insert_Payments_one(global::TransactionsGraphQLClient.State.PaymentsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPayment_Insert_Payments_one returnValue = default !;
            if (data?.__typename.Equals("Payments", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPayment_Insert_Payments_one_Payments(data.Id ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException(), data.Amount ?? throw new global::System.ArgumentNullException(), data.CreateDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPaymentResultInfo(global::TransactionsGraphQLClient.State.PaymentsData? insert_Payments_One, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Insert_Payments_one = insert_Payments_One;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::TransactionsGraphQLClient.State.PaymentsData? Insert_Payments_one { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPaymentResultInfo(Insert_Payments_one, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.AddTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddTransactionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.IAddTransactionResult);
        public AddTransactionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddTransactionResultInfo info)
            {
                return new AddTransactionResult(MapIAddTransaction_Insert_Transactions_one(info.Insert_Transactions_one, snapshot));
            }

            throw new global::System.ArgumentException("AddTransactionResultInfo expected.");
        }

        private global::TransactionsGraphQLClient.IAddTransaction_Insert_Transactions_one? MapIAddTransaction_Insert_Transactions_one(global::TransactionsGraphQLClient.State.TransactionsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddTransaction_Insert_Transactions_one returnValue = default !;
            if (data?.__typename.Equals("Transactions", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddTransaction_Insert_Transactions_one_Transactions(data.Id ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException(), data.Amount ?? throw new global::System.ArgumentNullException(), data.ExecutionDate ?? throw new global::System.ArgumentNullException(), data.PaymentId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddTransactionResultInfo(global::TransactionsGraphQLClient.State.TransactionsData? insert_Transactions_One, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Insert_Transactions_one = insert_Transactions_One;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// insert a single row into the table: "Transactions"
        /// </summary>
        public global::TransactionsGraphQLClient.State.TransactionsData? Insert_Transactions_one { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddTransactionResultInfo(Insert_Transactions_one, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.GetPaymentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPaymentsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.IGetPaymentsResult);
        public GetPaymentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPaymentsResultInfo info)
            {
                return new GetPaymentsResult(MapNonNullableIGetPayments_PaymentsNonNullableArray(info.Payments, snapshot));
            }

            throw new global::System.ArgumentException("GetPaymentsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetPayments_Payments> MapNonNullableIGetPayments_PaymentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.IGetPayments_Payments>();
            foreach (global::TransactionsGraphQLClient.State.PaymentsData child in list)
            {
                paymentss.Add(MapNonNullableIGetPayments_Payments(child, snapshot));
            }

            return paymentss;
        }

        private global::TransactionsGraphQLClient.IGetPayments_Payments MapNonNullableIGetPayments_Payments(global::TransactionsGraphQLClient.State.PaymentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPayments_Payments returnValue = default !;
            if (data.__typename.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPayments_Payments_Payments(data.Amount ?? throw new global::System.ArgumentNullException(), data.CreateDate ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPaymentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> payments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Payments = payments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> Payments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPaymentsResultInfo(Payments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.GetTransactionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTransactionsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.IGetTransactionsResult);
        public GetTransactionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTransactionsResultInfo info)
            {
                return new GetTransactionsResult(MapNonNullableIGetTransactions_TransactionsNonNullableArray(info.Transactions, snapshot));
            }

            throw new global::System.ArgumentException("GetTransactionsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.IGetTransactions_Transactions> MapNonNullableIGetTransactions_TransactionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.IGetTransactions_Transactions>();
            foreach (global::TransactionsGraphQLClient.State.TransactionsData child in list)
            {
                transactionss.Add(MapNonNullableIGetTransactions_Transactions(child, snapshot));
            }

            return transactionss;
        }

        private global::TransactionsGraphQLClient.IGetTransactions_Transactions MapNonNullableIGetTransactions_Transactions(global::TransactionsGraphQLClient.State.TransactionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetTransactions_Transactions returnValue = default !;
            if (data.__typename.Equals("Transactions", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetTransactions_Transactions_Transactions(data.Amount ?? throw new global::System.ArgumentNullException(), data.ExecutionDate ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException(), data.PaymentId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTransactionsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> transactions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Transactions = transactions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> Transactions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTransactionsResultInfo(Transactions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.SubNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubNewPaymentResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.ISubNewPaymentResult);
        public SubNewPaymentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubNewPaymentResultInfo info)
            {
                return new SubNewPaymentResult(MapNonNullableISubNewPayment_PaymentsNonNullableArray(info.Payments, snapshot));
            }

            throw new global::System.ArgumentException("SubNewPaymentResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewPayment_Payments> MapNonNullableISubNewPayment_PaymentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.ISubNewPayment_Payments>();
            foreach (global::TransactionsGraphQLClient.State.PaymentsData child in list)
            {
                paymentss.Add(MapNonNullableISubNewPayment_Payments(child, snapshot));
            }

            return paymentss;
        }

        private global::TransactionsGraphQLClient.ISubNewPayment_Payments MapNonNullableISubNewPayment_Payments(global::TransactionsGraphQLClient.State.PaymentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISubNewPayment_Payments returnValue = default !;
            if (data.__typename.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                returnValue = new SubNewPayment_Payments_Payments(data.Amount ?? throw new global::System.ArgumentNullException(), data.CreateDate ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubNewPaymentResultInfo(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> payments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Payments = payments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> Payments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubNewPaymentResultInfo(Payments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.SubNewTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubNewTransactionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TransactionsGraphQLClient.ISubNewTransactionResult);
        public SubNewTransactionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubNewTransactionResultInfo info)
            {
                return new SubNewTransactionResult(MapNonNullableISubNewTransaction_TransactionsNonNullableArray(info.Transactions, snapshot));
            }

            throw new global::System.ArgumentException("SubNewTransactionResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.ISubNewTransaction_Transactions> MapNonNullableISubNewTransaction_TransactionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.ISubNewTransaction_Transactions>();
            foreach (global::TransactionsGraphQLClient.State.TransactionsData child in list)
            {
                transactionss.Add(MapNonNullableISubNewTransaction_Transactions(child, snapshot));
            }

            return transactionss;
        }

        private global::TransactionsGraphQLClient.ISubNewTransaction_Transactions MapNonNullableISubNewTransaction_Transactions(global::TransactionsGraphQLClient.State.TransactionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISubNewTransaction_Transactions returnValue = default !;
            if (data.__typename.Equals("Transactions", global::System.StringComparison.Ordinal))
            {
                returnValue = new SubNewTransaction_Transactions_Transactions(data.Amount ?? throw new global::System.ArgumentNullException(), data.ExecutionDate ?? throw new global::System.ArgumentNullException(), data.FromIban ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.ToIban ?? throw new global::System.ArgumentNullException(), data.PaymentId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubNewTransactionResultInfo(global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> transactions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Transactions = transactions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> Transactions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubNewTransactionResultInfo(Transactions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddPaymentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddPaymentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public AddPaymentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddPaymentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPaymentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPaymentResult Result, AddPaymentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddPaymentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPaymentResult, AddPaymentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPaymentResultInfo(DeserializeIAddPayment_Insert_Payments_one(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insert_Payments_one")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::TransactionsGraphQLClient.State.PaymentsData? DeserializeIAddPayment_Insert_Payments_one(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.PaymentsData(typename, id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")), amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), createDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "CreateDate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddTransactionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IAddTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddTransactionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public AddTransactionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IAddTransactionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddTransactionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddTransactionResult Result, AddTransactionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddTransactionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddTransactionResult, AddTransactionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddTransactionResultInfo(DeserializeIAddTransaction_Insert_Transactions_one(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insert_Transactions_one")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::TransactionsGraphQLClient.State.TransactionsData? DeserializeIAddTransaction_Insert_Transactions_one(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Transactions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.TransactionsData(typename, id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")), amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), executionDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ExecutionDate")), paymentId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PaymentId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetPaymentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetPaymentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetPaymentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetPaymentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetPaymentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPaymentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPaymentsResult Result, GetPaymentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPaymentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPaymentsResult, GetPaymentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPaymentsResultInfo(DeserializeNonNullableIGetPayments_PaymentsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Payments")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> DeserializeNonNullableIGetPayments_PaymentsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.State.PaymentsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentss.Add(DeserializeNonNullableIGetPayments_Payments(child));
            }

            return paymentss;
        }

        private global::TransactionsGraphQLClient.State.PaymentsData DeserializeNonNullableIGetPayments_Payments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.PaymentsData(typename, amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), createDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "CreateDate")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetTransactionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.IGetTransactionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetTransactionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetTransactionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.IGetTransactionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTransactionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTransactionsResult Result, GetTransactionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetTransactionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetTransactionsResult, GetTransactionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetTransactionsResultInfo(DeserializeNonNullableIGetTransactions_TransactionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Transactions")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> DeserializeNonNullableIGetTransactions_TransactionsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.State.TransactionsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                transactionss.Add(DeserializeNonNullableIGetTransactions_Transactions(child));
            }

            return transactionss;
        }

        private global::TransactionsGraphQLClient.State.TransactionsData DeserializeNonNullableIGetTransactions_Transactions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Transactions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.TransactionsData(typename, amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), executionDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ExecutionDate")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")), paymentId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PaymentId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewPaymentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewPaymentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public SubNewPaymentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewPaymentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ISubNewPaymentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISubNewPaymentResult Result, SubNewPaymentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISubNewPaymentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISubNewPaymentResult, SubNewPaymentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SubNewPaymentResultInfo(DeserializeNonNullableISubNewPayment_PaymentsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Payments")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.PaymentsData> DeserializeNonNullableISubNewPayment_PaymentsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.State.PaymentsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentss.Add(DeserializeNonNullableISubNewPayment_Payments(child));
            }

            return paymentss;
        }

        private global::TransactionsGraphQLClient.State.PaymentsData DeserializeNonNullableISubNewPayment_Payments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.PaymentsData(typename, amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), createDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "CreateDate")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SubNewTransactionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TransactionsGraphQLClient.ISubNewTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewTransactionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public SubNewTransactionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TransactionsGraphQLClient.ISubNewTransactionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ISubNewTransactionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISubNewTransactionResult Result, SubNewTransactionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISubNewTransactionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISubNewTransactionResult, SubNewTransactionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SubNewTransactionResultInfo(DeserializeNonNullableISubNewTransaction_TransactionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Transactions")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TransactionsGraphQLClient.State.TransactionsData> DeserializeNonNullableISubNewTransaction_TransactionsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::TransactionsGraphQLClient.State.TransactionsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                transactionss.Add(DeserializeNonNullableISubNewTransaction_Transactions(child));
            }

            return transactionss;
        }

        private global::TransactionsGraphQLClient.State.TransactionsData DeserializeNonNullableISubNewTransaction_Transactions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Transactions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TransactionsGraphQLClient.State.TransactionsData(typename, amount: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Amount")), executionDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ExecutionDate")), fromIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FromIban")), id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), toIban: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ToIban")), paymentId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PaymentId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    ///<summary>columns and relationships of "Payments"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PaymentsData
    {
        public PaymentsData(global::System.String __typename, global::System.Int32? id = default !, global::System.String? fromIban = default !, global::System.String? toIban = default !, global::System.Double? amount = default !, global::System.String? createDate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            FromIban = fromIban;
            ToIban = toIban;
            Amount = amount;
            CreateDate = createDate;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Id { get; }

        public global::System.String? FromIban { get; }

        public global::System.String? ToIban { get; }

        public global::System.Double? Amount { get; }

        public global::System.String? CreateDate { get; }
    }

    ///<summary>columns and relationships of "Transactions"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class TransactionsData
    {
        public TransactionsData(global::System.String __typename, global::System.Int32? id = default !, global::System.String? fromIban = default !, global::System.String? toIban = default !, global::System.Double? amount = default !, global::System.String? executionDate = default !, global::System.Int32? paymentId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            FromIban = fromIban;
            ToIban = toIban;
            Amount = amount;
            ExecutionDate = executionDate;
            PaymentId = paymentId;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Id { get; }

        public global::System.String? FromIban { get; }

        public global::System.String? ToIban { get; }

        public global::System.Double? Amount { get; }

        public global::System.String? ExecutionDate { get; }

        public global::System.Int32? PaymentId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GraphQlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GraphQlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
